{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\"; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"http://localhost:4800/users/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post(\"http://localhost:4800/users/\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:4800/users/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["D:/python/ITPM_G2/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n} from \"./types\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n    if (localStorage.token) {\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try {\r\n        const res = await axios.get(\"http://localhost:4800/users/auth\");\r\n\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data,\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTH_ERROR,\r\n        });\r\n    }\r\n};\r\n\r\n// Register User\r\nexport const register =\r\n    ({ name, email, password }) =>\r\n        async (dispatch) => {\r\n            const config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            };\r\n\r\n            const body = JSON.stringify({ name, email, password });\r\n\r\n            try {\r\n                const res = await axios.post(\r\n                    \"http://localhost:4800/users/\",\r\n                    body,\r\n                    config\r\n                );\r\n\r\n                dispatch({\r\n                    type: REGISTER_SUCCESS,\r\n                    payload: res.data,\r\n                });\r\n\r\n                dispatch(loadUser());\r\n            } catch (err) {\r\n                const errors = err.response.data.errors;\r\n\r\n                if (errors) {\r\n                    errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n                }\r\n\r\n                dispatch({\r\n                    type: REGISTER_FAIL,\r\n                });\r\n            }\r\n        };\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n        const res = await axios.post(\r\n            \"http://localhost:4800/users/auth\",\r\n            body,\r\n            config\r\n        );\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data,\r\n        });\r\n\r\n        dispatch(loadUser());\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n\r\n        if (errors) {\r\n            errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n        }\r\n\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n        });\r\n    }\r\n};\r\n\r\n// Logout / Clear Profile\r\n\r\nexport const logout = () => (dispatch) => {\r\n    dispatch({ type: LOGOUT });\r\n};"]},"metadata":{},"sourceType":"module"}